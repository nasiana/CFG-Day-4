use joins_practice;

select * from table1_fruit_basket;

select * from table2_fruit_basket;


-- creates a table joining rows from both individual tables where values match
SELECT *
from table1_fruit_basket t1
INNER JOIN table2_fruit_basket t2 ON t1.ID = t2.ID;

-- creates a table joining rows from both individual tables where values match, experimenting
SELECT *
from table1_fruit_basket t1
INNER JOIN table2_fruit_basket t2 ON (t1.ID = t2.ID and t1.fruit = t2.fruit);

-- inner join but naming the columns
SELECT 
t1.ID as T1ID,
t2.ID as T2ID,
t1.Fruit as T1Fruit,
t2.Fruit as T2Fruit
from table1_fruit_basket t1
INNER JOIN table2_fruit_basket t2 ON t1.ID = t2.ID;

-- left outer join which retrieves the matching rows as well all the other data from the left table
SELECT 
t1.ID as T1ID,
t1.Fruit as T1Fruit,
t2.ID as T2ID,
t2.Fruit as T2Fruit
from table1_fruit_basket t1
LEFT JOIN table2_fruit_basket t2 ON t1.ID = t2.ID;

-- right outer join which retrieves the matching rows as well all the other data from the right table
SELECT 
t1.ID as T1ID,
t1.Fruit as T1Fruit,
t2.ID as T2ID,
t2.Fruit as T2Fruit
from table1_fruit_basket t1
RIGHT JOIN table2_fruit_basket t2 ON t1.ID = t2.ID;

-- change column name
ALTER TABLE customers.email_address
RENAME COLUMN email_address_customer_id TO customer_id;

select * from customers.customer;
select * from customers.email_address;

-- bulk inserting data into customers.email_address table
INSERT INTO customers.email_address
(email_address_id, customer_id, email_address)
VALUES 
(11, 1, 'ok@gmail.com'),
(22, 2, 'mo@gmail.com'),
(33, 3, 'yo@gmail.com');

-- show first_name, last_name and email address
use customers;
SELECT 
c.first_name, c.last_name, ea.email_address
from customer c
INNER JOIN email_address ea ON c.customer_id = ea.customer_id;

use customers;
-- joins two tables 
SELECT *
from customer c
INNER JOIN email_address ea ON c.customer_id = ea.customer_id;


-- experimenting so i can see changes later
select * from customers.email_address; 
UPDATE customers.email_address
SET 
email_address = 'null'
WHERE 
customer_id = 3;

-- EXPERIMENTING with left outer join
use customers;
SELECT 
*
from customer c
LEFT OUTER JOIN email_address ea 
ON c.customer_id = ea.customer_id;

-- cross join where all values are cross joined together in cartesian product A X B
USE joins_practice;
SELECT 
t1.*, t2.*
from table1_fruit_basket t1
CROSS JOIN table2_fruit_basket t2;

CREATE TABLE employee (
  EmployeeID int(11) NOT NULL,
  Name varchar(55),
  ManagerID int(11),
  PRIMARY KEY (EmployeeID)
);

--
USE joins_practice;
-- Insert Sample Data
CREATE TABLE employee (
  EmployeeID int(11) NOT NULL,
  Name varchar(55),
  ManagerID int(11),
  PRIMARY KEY (EmployeeID)
);

-- Insert Sample Data
INSERT INTO Employee
VALUES
(1, 'Annie', 3),
(2, 'David', 3),
(3, 'Eliazabeth', NULL),
(4, 'Mary',2),
(5, 'Roger',2),
(7, 'Ben', 2);

select * from employee;
-- self join where you reference the same table with two different aliases, match manager to employee. Using inner join.
select e1.Name as EmployeeName, e2.Name as ManagerName
from employee e1
inner join employee e2
on e1.ManagerId = e2.EmployeeId;

select * from employee;
-- self join where you reference the same table with two different aliases, select all
select *
from employee e1
inner join employee e2
on e1.ManagerId = e2.EmployeeId;

-- self join where you reference the same table with two different aliases, match manager to employee. This time with left join.
select e1.Name as EmployeeName, e2.Name as ManagerName
from employee e1
left join employee e2
on e1.ManagerId = e2.EmployeeId;

-- self join where you reference the same table with two different aliases, match manager to employee. This time with left join.
-- if the e2.name value is Null then the Null is replaced with 'Top Dog' as they are clearly the boss if they have no boss
select e1.Name as EmployeeName, IFNULL(e2.Name, 'Top Dog') as ManagerName
from employee e1
left join employee e2
on e1.ManagerId = e2.EmployeeId;


